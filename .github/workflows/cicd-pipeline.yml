name: DevOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Stage 1: Build & Install
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

  # Stage 2: Lint & Security Scan
  lint_security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          pip install flake8 bandit safety

      - name: Run Flake8 linter
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Bandit security check
        run: bandit -r . -ll -i || true

      - name: Check for known vulnerabilities
        run: safety check --json || true

  # Stage 3: Test with Database Service
  test:
    runs-on: ubuntu-latest
    needs: lint_security

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_todoapp_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Django migrations
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: test_todoapp_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: python manage.py migrate

      - name: Run tests
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: test_todoapp_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: python manage.py test --no-input

      - name: Generate test coverage
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: test_todoapp_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          pip install coverage
          coverage run --source='.' manage.py test
          coverage report

  # Stage 4: Build Docker Image
  build_docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t django-todo:${{ github.sha }} -t django-todo:latest .
          echo "Docker image built successfully"

      - name: List built images
        run: docker images

  # Stage 5: Deploy (Conditional - only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build_docker
    # Deploy when pushing to main OR project branches, or run manually via workflow_dispatch
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/project') && github.event_name == 'push'
    # Add manual trigger support
    # You can also run this job manually from the Actions UI after adding secrets.

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          # Use the repository secrets you added on GitHub.
          # Common secret names: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN (or DOCKER_USERNAME/DOCKER_PASSWORD).
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/django-todo:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/django-todo:latest

      - name: Deployment successful
        run: |
          echo "âœ… Docker image pushed to Docker Hub"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/django-todo:latest"
          echo "Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
